#!/bin/bash

# Usage: yt [url]

#Constants

if [ -z "${DANCE_HACKING_MUSIC_FOLDER}" ]
then
  echo "No \$DANCE_HACKING_MUSIC_FOLDER environment variable set."
fi

URL_ARCHIVE_FOLDER="${DANCE_HACKING_MUSIC_FOLDER}/Archive/links"

# Get the URL
URL="${1}"
if [[ "${URL}" == "" ]]
then
  # Try to get it from the browser.
  URL=$(browser-tab)
fi

# Print out the URL, just in case.
echo "URL: ${URL}"
echo "--------"

# Target file name.
TITLE=`youtube-dl -o "%(title)s" --get-filename "${URL}"`
TITLE="${TITLE//[^a-zA-Z0-9-=\(\)\. ]/}"

if [ -z "$TITLE" ]
then
  echo "Could not determine title. Maybe the URL was not valid?"
  exit 1
fi

FILE=`youtube-dl -o "%(title)s.%(ext)s" --get-filename "${URL}"`
FILE="${FILE//[^a-zA-Z0-9-=\(\)\. ]/}"


# Make a new folder for the download.
cd "${DANCE_HACKING_MUSIC_FOLDER}"
#NEW_FOLDER="`unixtime` - ${FILE}"
NEW_FOLDER="${TITLE}"
mkdir "${NEW_FOLDER}"
cd "${NEW_FOLDER}"
open .

# For opening again later.
# echo "[InternetShortcut]\nURL=${URL}" > "${TITLE}.url"
WEBLOC_WITH_ESCAPED_URL=`echo "${TITLE}.webloc" | sed "s/\&/\&amp;/g"`
weblocify "${URL}" "${WEBLOC_WITH_ESCAPED_URL}"
weblocify "${URL}" "${URL_ARCHIVE_FOLDER}/${WEBLOC_WITH_ESCAPED_URL}" # TODO: Use URL or time to avoid exact title collisions.

# youtube-dl
youtube-dl -c -o "${FILE}" --write-description --write-info-json "${URL}"

# Convert to high-quality .mp3
mp3ify "${FILE}"
MP3_FILE="$TITLE.mp3"
mv "${FILE}.mp3" "${MP3_FILE}"

# Analyze the .mp3 version.
analyze "${MP3_FILE}"

# Full-quality .wav file.
wavify "${FILE}"
WAV_FILE="$TITLE.wav"
mv "${FILE}.wav" "${WAV_FILE}"